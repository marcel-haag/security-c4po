import {Injectable} from '@angular/core';
import {environment} from '../../environments/environment';
import {HttpClient, HttpParams} from '@angular/common/http';
import {Observable, of} from 'rxjs';
import {Category} from '@shared/models/category.model';
import {Pentest} from '@shared/models/pentest.model';
import {Store} from '@ngxs/store';
import {ProjectState} from '@shared/stores/project-state/project-state';
import {catchError, map, switchMap} from 'rxjs/operators';
import {getTempPentestsForCategory} from '@shared/functions/categories/get-temp-pentests-for-category.function';
import {Finding} from '@shared/models/finding.model';
import {Severity} from '@shared/models/severity.enum';

@Injectable({
  providedIn: 'root'
})
export class PentestService {

  private apiBaseURL = `${environment.apiEndpoint}/pentests`;

  constructor(
    private http: HttpClient,
    private readonly store: Store) {
  }

  /**
   * Load Pentests
   * @param category the categories of which the pentests should be requested
   */
  public loadPentests(category: Category): Observable<Pentest[]> {
    return this.store.selectOnce(ProjectState.project).pipe(
      switchMap(project => this.getPentestByProjectIdAndCategory(project.id, category)),
      catchError(_ => of(null)),
      map(response => {
        let pentests = response;
        if (!pentests) {
          pentests = getTempPentestsForCategory(category);
          // tslint:disable-next-line:no-console
          console.info('Initial pentest data loaded.');
        }
        return pentests;
      })
    );
  }

  /**
   * Get Pentests
   * @param projectId the id of the project
   * @param category the categories of which the pentests should be requested
   */
  private getPentestByProjectIdAndCategory(projectId: string, category: Category): Observable<Pentest[]> {
    const queryParams = new HttpParams().append('projectId', projectId).append('category', Category[category]);
    return this.http.get<Pentest[]>(`${this.apiBaseURL}`, {params: queryParams});
  }

  /**
   * Get Findings for Pentest Id
   * @param pentestId the id of the project
   */
  public getFindingsByPentestId(pentestId: string): Observable<Finding[]> {
    console.warn('Findings for:', pentestId);
    if (pentestId) {
      return this.http.get<Finding[]>(`${this.apiBaseURL}/${pentestId}/findings`);
    } else {
      // return of([]);
      // Todo: Remove mocked Findings
      return of([
        {
          id: 'ca96cc19-88ff-4874-8406-dc892620afd4',
          title: 'This is a lit test finding ma brother',
          impact: 'fucked up a lot man. better fix it',
          severity: Severity.LOW,
        },
        {
          id: 'ca96cc19-88ff-4874-8406-dc892620afd4',
          title: 'This is a lit test finding ma brother',
          impact: 'fucked up a lot man. better fix it',
          severity: Severity.MEDIUM,
        },
        {
          id: 'ca96cc19-88ff-4874-8406-dc892620afd4',
          title: 'This is a lit test finding ma brother',
          impact: 'fucked up a lot man. better fix it',
          severity: Severity.HIGH,
        },
        {
          id: 'ca96cc19-88ff-4874-8406-dc892620afd4',
          title: 'This is a lit test finding ma brother',
          impact: 'fucked up a lot man. better fix it',
          severity: Severity.CRITICAL,
        }
      ]);
    }
  }
}
