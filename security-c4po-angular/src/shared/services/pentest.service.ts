import {Injectable} from '@angular/core';
import {environment} from '../../environments/environment';
import {HttpClient, HttpParams} from '@angular/common/http';
import {Observable, of} from 'rxjs';
import {Category} from '@shared/models/category.model';
import {Pentest} from '@shared/models/pentest.model';
import {Store} from '@ngxs/store';
import {ProjectState} from '@shared/stores/project-state/project-state';
import {catchError, map, switchMap} from 'rxjs/operators';
import {getTempPentestsForCategory} from '@shared/functions/categories/get-temp-pentests-for-category.function';
import {Finding, FindingDialogBody} from '@shared/models/finding.model';
import {Severity} from '@shared/models/severity.enum';
import {Comment} from '@shared/models/comment.model';
import {v4 as UUID} from 'uuid';

@Injectable({
  providedIn: 'root'
})
export class PentestService {

  private apiBaseURL = `${environment.apiEndpoint}/pentests`;

  constructor(
    private http: HttpClient,
    private readonly store: Store) {
  }

  /**
   * Load Pentests
   * @param category the categories of which the pentests should be requested
   */
  public loadPentests(category: Category): Observable<Pentest[]> {
    return this.store.select(ProjectState.project).pipe(
      switchMap(project => this.getPentestByProjectIdAndCategory(project.id, category)),
      catchError(_ => of(null)),
      map((response: Pentest[]) => {
        // ToDo: Improve performance by only loading templates when not all pentests of category got returned
        // Load template pentest
        const templatePentests = getTempPentestsForCategory(category);
        // The pentests that get returned to the component
        let completePentests: Pentest[] = response;
        // Add pentest template to complete pentests if not included in request
        if (completePentests) {
          templatePentests.forEach((templatePentest: Pentest) => {
            if (!completePentests.map(it => it.refNumber).includes(templatePentest.refNumber)) {
              completePentests.push(templatePentest);
            }
          });
        } else {
          completePentests = templatePentests;
        }
        return completePentests;
      })
    );
  }

  /**
   * Get Pentests
   * @param projectId the id of the project
   * @param category the categories of which the pentests should be requested
   */
  private getPentestByProjectIdAndCategory(projectId: string, category: Category): Observable<Pentest[]> {
    const queryParams = new HttpParams().append('projectId', projectId).append('category', Category[category]);
    return this.http.get<Pentest[]>(`${this.apiBaseURL}`, {params: queryParams});
  }

  /**
   * Save Pentest
   * @param pentest the information of the Pentest
   */
  public savePentest(projectId: string, pentest: Pentest): Observable<Pentest> {
    return this.http.post<Pentest>(`${this.apiBaseURL}/${projectId}`, pentest);
  }

  /**
   * Update Pentest
   * @param pentest the information of the Pentest
   */
  public updatePentest(pentest: Pentest): Observable<Pentest> {
    return this.http.patch<Pentest>(`${this.apiBaseURL}/${pentest.id}`, pentest);
  }

  /**
   * Get Findings for Pentest Id
   * @param pentestId the id of the project
   */
  public getFindingsByPentestId(pentestId: string): Observable<Finding[]> {
    console.warn('Findings for:', pentestId);
    if (pentestId) {
      return this.http.get<Finding[]>(`${this.apiBaseURL}/${pentestId}/findings`);
    } else {
      // return of([]);
      // Todo: Remove mocked Findings
      return of([
        {
          id: 'ca96cc19-88ff-4874-8406-dc892620afd4',
          title: 'This is a creative title',
          description: 'test',
          impact: 'This impacts only the UI',
          severity: Severity.LOW,
          reproduction: ''
        },
        {
          id: 'ca96cc19-88ff-4874-8406-dc892620afd4',
          title: 'This is a creative title',
          description: 'test',
          impact: 'This is impacts some things',
          severity: Severity.MEDIUM,
          reproduction: ''
        },
        {
          id: 'ca96cc19-88ff-4874-8406-dc892620afd4',
          title: 'This is a creative title',
          description: 'test',
          impact: 'This is impacts a lot',
          severity: Severity.HIGH,
          reproduction: ''
        },
        {
          id: 'ca96cc19-88ff-4874-8406-dc892620afd4',
          title: 'This is a creative title',
          description: 'test',
          impact: 'This is impacts a lot',
          severity: Severity.CRITICAL,
          reproduction: ''
        }
      ]);
    }
  }

  /**
   * Save Finding
   * @param pentestId the id of the pentest
   * @param finding the information of the finding
   */
  public saveFinding(pentestId: string, finding: Finding): Observable<Finding> {
    console.warn('Finding: ', finding);
    return this.http.post<Finding>(`${this.apiBaseURL}/${pentestId}/finding`, finding);
  }

  /**
   * Get Comments for Pentest Id
   * @param pentestId the id of the project
   */
  public getCommentsByPentestId(pentestId: string): Observable<Comment[]> {
    console.warn('Comments for:', pentestId);
    if (pentestId) {
      return this.http.get<Comment[]>(`${this.apiBaseURL}/${pentestId}/comments`);
    } else {
      // return of([]);
      // Todo: Remove mocked Comments
      return of([
        {
          id: 'ca96cc19-88ff-4874-8406-dc892620afd2',
          title: 'This is a creative title',
          description: 'This is a creative description',
          relatedFindings: ['ca96cc19-88ff-4874-8406-dc892620afd4'],
        },
        {
          id: 'ca96cc19-88ff-4874-8406-dc892620afd4',
          title: 'This is a creative title',
          description: 'This is a creative description',
          relatedFindings: [],
        }
      ]);
    }
  }
}
