import {Component, Input, OnInit} from '@angular/core';
import {PentestService} from '@shared/services/pentest.service';
import {BehaviorSubject, Observable} from 'rxjs';
import {Pentest} from '@shared/models/pentest.model';
import {UntilDestroy, untilDestroyed} from '@ngneat/until-destroy';
import {filter, mergeMap, tap} from 'rxjs/operators';
import {NotificationService, PopupType} from '@shared/services/notification.service';
import {Finding, FindingDialogBody, FindingEntry, transformFindingsToObjectiveEntries} from '@shared/models/finding.model';
import {NbGetters, NbTreeGridDataSource, NbTreeGridDataSourceBuilder} from '@nebular/theme';
import * as FA from '@fortawesome/free-solid-svg-icons';
import {isNotNullOrUndefined} from 'codelyzer/util/isNotNullOrUndefined';
import {FindingDialogService} from '@shared/modules/finding-dialog/service/finding-dialog.service';
import {FindingDialogComponent} from '@shared/modules/finding-dialog/finding-dialog.component';

@UntilDestroy()
@Component({
  selector: 'app-pentest-findings',
  templateUrl: './pentest-findings.component.html',
  styleUrls: ['./pentest-findings.component.scss']
})
export class PentestFindingsComponent implements OnInit {

  @Input()
  pentestInfo$: BehaviorSubject<Pentest> = new BehaviorSubject<Pentest>(null);

  // HTML only
  readonly fa = FA;
  loading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);

  columns: Array<FindingColumns> = [
    FindingColumns.FINDING_ID, FindingColumns.SEVERITY, FindingColumns.TITLE, FindingColumns.IMPACT, FindingColumns.ACTIONS
  ];
  dataSource: NbTreeGridDataSource<FindingEntry>;

  data: FindingEntry[] = [];

  getters: NbGetters<FindingEntry, FindingEntry> = {
    dataGetter: (node: FindingEntry) => node,
    childrenGetter: (node: FindingEntry) => node.childEntries || undefined,
    expandedGetter: (node: FindingEntry) => !!node.expanded,
  };

  constructor(private readonly pentestService: PentestService,
              private dataSourceBuilder: NbTreeGridDataSourceBuilder<FindingEntry>,
              private notificationService: NotificationService,
              private findingDialogService: FindingDialogService) {
    this.dataSource = dataSourceBuilder.create(this.data, this.getters);
  }

  ngOnInit(): void {
    this.loadFindingsData();
  }

  loadFindingsData(): void {
    this.pentestService.getFindingsByPentestId(this.pentestInfo$.getValue() ? this.pentestInfo$.getValue().id : '')
      .pipe(
        untilDestroyed(this),
        filter(isNotNullOrUndefined),
        tap(() => this.loading$.next(true))
      )
      .subscribe({
        next: (findings: Finding[]) => {
          this.data = transformFindingsToObjectiveEntries(findings);
          this.dataSource.setData(this.data, this.getters);
          this.loading$.next(false);
        },
        error: err => {
          console.log(err);
          this.notificationService.showPopup('findings.popup.not.found', PopupType.FAILURE);
          this.loading$.next(false);
        }
      });
  }

  onClickAddFinding(): void {
    this.findingDialogService.openFindingDialog(
      FindingDialogComponent,
      null,
      {
        closeOnEsc: false,
        hasScroll: false,
        autoFocus: false,
        closeOnBackdropClick: false
      }
    ).pipe(
      filter(value => !!value),
      tap((value) => console.warn('FindingDialogBody: ', value)),
      mergeMap((value: FindingDialogBody) =>
        this.pentestService.saveFinding(this.pentestInfo$.getValue() ? this.pentestInfo$.getValue().id : '', value)
      ),
      untilDestroyed(this)
    ).subscribe({
      next: () => {
        this.loadFindingsData();
        this.notificationService.showPopup('finding.popup.save.success', PopupType.SUCCESS);
      },
      error: error => {
        console.error(error);
        this.notificationService.showPopup('finding.popup.save.failed', PopupType.FAILURE);
      }
    });
  }

  onClickEditFinding(finding): void {
    console.info('Coming soon..');
  }

  onClickDeleteFinding(finding): void {
    console.info('Coming soon..');
  }

  // HTML only
  isLoading(): Observable<boolean> {
    return this.loading$.asObservable();
  }
}

enum FindingColumns {
  FINDING_ID = 'findingId',
  SEVERITY = 'severity',
  TITLE = 'title',
  IMPACT = 'impact',
  ACTIONS = 'actions'
}
