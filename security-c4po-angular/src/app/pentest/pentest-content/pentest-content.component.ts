import {Component, OnInit} from '@angular/core';
import * as FA from '@fortawesome/free-solid-svg-icons';
import {BehaviorSubject, Observable} from 'rxjs';
import {Select, Store} from '@ngxs/store';
import {ProjectState} from '@shared/stores/project-state/project-state';
import {UntilDestroy, untilDestroyed} from '@ngneat/until-destroy';
import {Pentest, transformPentestToRequestBody} from '@shared/models/pentest.model';
import {PentestStatus} from '@shared/models/pentest-status.model';
import {StatusText} from '@shared/widgets/status-tag/status-tag.component';
import {PentestService} from '@shared/services/pentest.service';
import {NotificationService, PopupType} from '@shared/services/notification.service';
import {Project} from '@shared/models/project.model';
import {isNotNullOrUndefined} from 'codelyzer/util/isNotNullOrUndefined';
import {filter} from 'rxjs/operators';

@UntilDestroy()
@Component({
  selector: 'app-pentest-content',
  templateUrl: './pentest-content.component.html',
  styleUrls: ['./pentest-content.component.scss']
})
export class PentestContentComponent implements OnInit {
  // HTML only
  readonly fa = FA;

  @Select(ProjectState.project)
  selectedProject$: Observable<Project>;
  selectedProjectId: string;

  pentest$: BehaviorSubject<Pentest> = new BehaviorSubject<Pentest>(null);
  pentestChanged$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  currentNumberOfFindings$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  currentNumberOfComments$: BehaviorSubject<number> = new BehaviorSubject<number>(0);

  // Pentest Status Handler
  currentStatus: PentestStatus = PentestStatus.NOT_STARTED;
  private initialPentestStatus: PentestStatus;
  status = PentestStatus;
  readonly statusTexts: Array<StatusText> = [
    {value: PentestStatus.NOT_STARTED, translationText: 'pentest.statusText.not_started'},
    /* ToDo: Disabled not needed inside pentest */
    /*{value: PentestStatus.DISABLED, translationText: 'pentest.statusText.disabled'},*/
    {value: PentestStatus.OPEN, translationText: 'pentest.statusText.open'},
    {value: PentestStatus.IN_PROGRESS, translationText: 'pentest.statusText.in_progress'},
    {value: PentestStatus.COMPLETED, translationText: 'pentest.statusText.completed'}
  ];

  constructor(
    private readonly pentestService: PentestService,
    private notificationService: NotificationService,
    private store: Store) {
  }

  ngOnInit(): void {
    this.selectedProject$.pipe(
      filter(isNotNullOrUndefined),
      untilDestroyed(this)
    ).subscribe({
      next: (project) => {
        this.selectedProjectId = project.id;
      },
      error: (err) => {
        console.error(err);
      }
    });

    this.store.select(ProjectState.pentest).pipe(
      untilDestroyed(this)
    ).subscribe({
      next: (selectedPentest: Pentest) => {
        console.warn(selectedPentest);
        this.pentest$.next(selectedPentest);
        this.currentStatus = selectedPentest.status;
        this.initialPentestStatus = selectedPentest.status;
        const findings = selectedPentest.findingIds ? selectedPentest.findingIds.length : 0;
        this.currentNumberOfFindings$.next(findings);
        const comments = selectedPentest.commentIds ? selectedPentest.commentIds.length : 0;
        this.currentNumberOfComments$.next(comments);
      },
      error: err => {
        console.error(err);
      }
    });
  }

  onClickSavePentest(): void {
    this.pentest$.next({...this.pentest$.getValue(), status: this.currentStatus});
    this.pentestService.savePentest(this.selectedProjectId, transformPentestToRequestBody(this.pentest$.getValue()))
      .subscribe({
        next: (pentest: Pentest) => {
          this.pentest$.next(pentest);
          this.initialPentestStatus = pentest.status;
          this.notificationService.showPopup('pentest.popup.save.success', PopupType.SUCCESS);
        },
        error: err => {
          console.log(err);
          this.notificationService.showPopup('pentest.popup.save.failed', PopupType.FAILURE);
        }
      });
  }

  onClickUpdatePentest(): void {
    this.pentest$.next({...this.pentest$.getValue(), status: this.currentStatus});
    this.pentestService.updatePentest(transformPentestToRequestBody(this.pentest$.getValue()))
      .subscribe({
        next: (pentest: Pentest) => {
          this.pentest$.next(pentest);
          this.initialPentestStatus = pentest.status;
          this.notificationService.showPopup('pentest.popup.update.success', PopupType.SUCCESS);
        },
        error: err => {
          console.log(err);
          this.notificationService.showPopup('pentest.popup.update.failed', PopupType.FAILURE);
        }
      });
  }

  /**
   * @return true if initial pentest Status is different from current pentest status
   */
  pentestStatusChanged(): boolean {
    if (this.initialPentestStatus !== this.currentStatus) {
      this.pentestChanged$.next(true);
    } else {
      this.pentestChanged$.next(false);
    }
    return this.pentestChanged$.getValue();
  }

  /**
   * @return the correct nb-status for current pentest-status
   */
  getPentestFillStatus(value: PentestStatus): string {
    let pentestFillStatus;
    switch (value) {
      case PentestStatus.NOT_STARTED: {
        pentestFillStatus = 'basic';
        break;
      }
      case PentestStatus.OPEN: {
        pentestFillStatus = 'info';
        break;
      }
      case PentestStatus.IN_PROGRESS: {
        pentestFillStatus = 'warning';
        break;
      }
      case PentestStatus.COMPLETED: {
        pentestFillStatus = 'success';
        break;
      }
      default: {
        pentestFillStatus = 'basic';
        break;
      }
    }
    return pentestFillStatus;
  }
}
