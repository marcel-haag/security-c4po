import {Component, OnDestroy, OnInit} from '@angular/core';
import {NbMenuItem, NbMenuService} from '@nebular/theme';
import {Subject} from 'rxjs';
import {Store} from '@ngxs/store';
import {ChangeCategory} from '@shared/stores/project-state/project-state.actions';
import {Category} from '@shared/models/category.model';
import {untilDestroyed} from 'ngx-take-until-destroy';
import {TranslateService} from '@ngx-translate/core';

@Component({
  selector: 'app-pentest-categories',
  templateUrl: './pentest-categories.component.html',
  styleUrls: ['./pentest-categories.component.scss']
})
export class PentestCategoriesComponent implements OnInit, OnDestroy {
  items: NbMenuItem[] = [];

  private destroy$ = new Subject<void>();
  selectedCategory: Category;

  constructor(private store: Store,
              private menuService: NbMenuService,
              private translateService: TranslateService) {
  }

  ngOnInit(): void {
    for (const cat in Category) {
      if (isNaN(Number(cat))) {
        // initialize category menu
        this.translateService.get('categories.' + cat)
          .subscribe((text: string) => {
            this.items.push({title: text, data: Category[cat as keyof typeof Category]});
          });
        // set up continuous translation
        this.translateService.stream('categories.' + cat)
          .subscribe((text: string) => {
            this.items.forEach(item => {
              if (item.data === Category[cat as keyof typeof Category]) {
                item.title = text;
              }
            });
          });
      }
    }
    this.menuService.onItemClick()
      .pipe(
        untilDestroyed(this)
      )
      .subscribe((menuBag) => {
        this.selectedCategory = menuBag.item.data;
        console.log(this.selectedCategory);
        this.store.dispatch(new ChangeCategory(this.selectedCategory));
      });
  }

  // tslint:disable-next-line:typedef
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
}
